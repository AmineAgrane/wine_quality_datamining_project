# import all the library
library(forcats)
library(ggplot2)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
View(df_wine)
View(df_wine)
df_wine <- subset (df_wine, select = -good)
as.data.frame(str(df_wine))
summary(df_wine)
as.data.frame(str(df_wine))
as.data.frame(summary(df_wine))
str(df_wine)
as.data.frame(summary(df_wine))
str(df_wine)
summary(df_wine)
df_wine <- subset (df_wine, select = -good)
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('First threshold distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Second threshold distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
qualityFactor <- ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good',''))
qualityFactor
#df_wine <- data.frame(df_wine, qualityFactor)
View(df_wine)
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good',''))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
View(df_wine)
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
set.seed(10)
train_set_size <- rond(0.8 * dim(df_wine)[1])
set.seed(10)
train_set_size <- round(0.8 * dim(df_wine)[1])
#wine_train <- wine[1:3750, ]
#test set
#wine_test <- wine[3751:4898, ]
set.seed(10)
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
training_set <- sample(dataset_size, train_set_size, replace=FALSE)
#wine_train <- wine[1:3750, ]
#test set
#wine_test <- wine[3751:4898, ]
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
install.packages('tree')
# import all the library
library(forcats)
library(ggplot2)
library(tree)
View(df_wine)
View(df_wine)
tree_model <- tree(qualityClass~., data=training_data)
View(df_wine)
View(df_wine)
predict_tree <- predit(tree_model, test_data[, -13], type="class")
predict_tree <- predict(tree_model, test_data[, -13], type="class")
tree_model <- tree(as.factor(qualityClass)~., data=training_data)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good',''))
df_wine <- data.frame(subset (df_wine, select = -quality), as.factor(qualityClass))
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
df_wine <- subset (df_wine, select = -good)
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good',''))
df_wine <- data.frame(subset (df_wine, select = -quality), as.factor(qualityClass))
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
tree_model <- tree(qualityClass~., data=training_data)
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
df_wine <- subset (df_wine, select = -good)
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good',''))
df_wine <- data.frame(subset (df_wine, select = -quality), as.factor(qualityClass))
View(df_wine)
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
View(df_wine)
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
tree_model <- tree(qualityClass~., data=training_data)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
View(df_wine)
df_wine <- subset (df_wine, select = -good)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
tree_model <- tree(qualityClass~., data=training_data)
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
tree_model <- tree(qualityClass~., data=training_data)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
mean(predict_tree != test_data[, 13])
mean(predict_tree != test_data[, 13])
plot(tree_model)
mean(predict_tree != test_data[, 13])
plot(tree_model)
text(tree_model, pretyy=0)
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
df_wine <- subset (df_wine, select = -good)
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold 1 distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
cat('Threshold 2 distribution :', table(ifelse(df_wine$quality<=5,'Bad', ifelse(df_wine$quality>=6, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
tree_model <- tree(qualityClass~., data=training_data)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
mean(predict_tree != test_data[, 13])
plot(tree_model)
text(tree_model, pretyy=0)
mean(predict_tree != test_data[, 13])
plot(tree_model)
text(tree_model, pretty=0)
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
df_wine <- subset (df_wine, select = -good)
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
View(df_wine)
View(df_wine)
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
tree_model <- tree(qualityClass~., data=training_data)
predict_tree <- predict(tree_model, test_data[, -13], type="class")
mean(predict_tree != test_data[, 13])
plot(tree_model)
text(tree_model, pretty=0)
install.packages('rpart')
library(rpart)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
library(rpart)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
library(rpart)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
install.packages('rpart.plot')
library(rpart)
library(rpart.plot)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
# import all the library
library(forcats)
library(ggplot2)
library(tree)
# import all the library
library(forcats)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold  distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
View(df_wine)
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
# we set the seed to get reproducible results
set.seed(10)
# split the datasets
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
mean(predict_tree != test_data[, 13])
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
#rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
#rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
#rpart.plot(rpart_model)
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
mean(predict_rpart != test_data[, 13])
rpart.plot(rpart_model)
# Visualise the model graphicaly
rpart.plot(rpart_model)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=2)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=1)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=3)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=9)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=100)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the model graphicaly
rpart.plot(rpart_model, extra=101)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# Visualise the decision tree model graphically
rpart.plot(rpart_model, extra=101)
# Visualise the decision tree model graphically
#rpart.plot(rpart_model, extra=101)
# Visualise the decision tree model graphically
rpart.plot(rpart_model, extra=101)
# import all the library
library(forcats)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold  distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
# we set the seed to get reproducible results
set.seed(10)
# get the training dataset indexes
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
# split into train and test sets
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
# Visualise the decision tree model graphically
rpart.plot(rpart_model, extra=101)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
# import all the library
library(forcats)
library(ggplot2)
library(rpart)
library(rpart.plot)
# Load the data
df_wine <- as.data.frame( read.csv(file = './data/winequality.csv', sep=',', stringsAsFactors=F))
head(df_wine)
tail(df_wine)
cat('The number of rows inside the dataset is : ', dim(df_wine)[1])
cat('The number of columns/features inside the dataset is : ', dim(df_wine)[2])
str(df_wine)
summary(df_wine)
as.data.frame( cor(df_wine[c(-13, -14)]))
cat('Number of NAN values for each variable :', colSums(is.na(df_wine)))
# Simple Bar Plot
hist(df_wine$quality, main="Wine Quality Score Distribution",ylab="Count", xlab="Wine Quality Score", breaks=10, , col= "darkgreen")
table(df_wine$quality)
cat('Threshold  distribution :', table(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, "Good",""))))
# We drop the quality column and replace it with the new qualityClass variable.
qualityClass <- as.factor(ifelse(df_wine$quality<=6,'Bad', ifelse(df_wine$quality>=7, 'Good','')))
df_wine <- data.frame(subset (df_wine, select = -quality), qualityClass)
# we set the seed to get reproducible results
set.seed(10)
# get the training dataset indexes
dataset_size <- dim(df_wine)[1]
train_set_size <- round(0.8*dataset_size)
train_index <- sample(dataset_size, train_set_size, replace=FALSE)
# split into train and test sets
training_data <- df_wine[train_index, ]
test_data <- df_wine[-train_index,]
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
# Visualise the decision tree model graphically
rpart.plot(rpart_model, extra=101)
#predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
#mean(predict_rpart != test_data[, 13])
rpart_model <- rpart(qualityClass~., data=training_data, method="class")
# choosing the best complexity parameter "cp" to prune the tree
cp.optim <- rpart_model$cptable[which.min(rpart_model$cptable[,"xerror"]),"CP"]
# tree prunning using the best complexity parameter. For more in
tree <- prune(rpart_model, cp=cp.optim)
# Visualise the decision tree model graphically
rpart.plot(tree, extra=101)
# Visualise the decision tree model graphically
rpart.plot(tree, extra=101)
# Visualise the decision tree model graphically
rpart.plot(rpart_model, extra=101)
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
t <- table(test_data[, 13])
confusionMatrix(t)
library(caret,quietly = TRUE)
install.packages('caret')
install.packages('quietly')
library(caret,quietly = TRUE)
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
t <- table(test_data[, 13], predict_rpart)
confusionMatrix(t)
install.packages('e1071')
library(caret,quietly = TRUE)
predict_rpart <- predict(rpart_model,  test_data[, -13], type="class")
t <- table(test_data[, 13], predict_rpart)
confusionMatrix(t)
